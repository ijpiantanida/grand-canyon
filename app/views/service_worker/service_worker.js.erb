const CACHE_NAME = 'pwa-concept-cache-v3';
const URLS_TO_PRECACHE = [
  "<%= root_url %>",
  "<%= asset_url("application.js") %>",
  "<%= asset_url("application.css") %>",
  "<%= asset_url("grand_canyon_background.jpg") %>",
  "<%= asset_url("canyon_map.jpeg") %>",
  "<%= asset_path("WorkSans-Regular.ttf") %>"
];

self.addEventListener('install', (event) => {
  console.log("Service worker installing");
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        return cache.addAll(URLS_TO_PRECACHE);
      })
      .then(() => self.skipWaiting())
  );
});

self.addEventListener('activate', (event) => {
  console.log("Service worker activating");
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames
          .filter(cacheName => cacheName != CACHE_NAME)
          .map(cacheName => caches.delete(cacheName)));
    }));
});

self.addEventListener('fetch', (event) => {
  //Any html page will return the same HTML as the home, which is cached
  if (event.request.mode === 'navigate' ||
    (event.request.method === 'GET' &&
    event.request.headers.get('accept').includes('text/html'))) {
    return event.respondWith(
      caches.match("/")
        .then(response => {
          if (!response) {
            throw "App index not found";
          }
          console.log(event.request.url, "was cached", response);
          return response;
        }).catch(error => myFetch(event)
        .then(response => caches.open(CACHE_NAME).then(cache => {
          cache.put("/", response.clone());
          return response;
        })))
    );
  }

  if (event.request.url.match(/api\/poi$/)) {
    return event.respondWith(
      myFetch(event)
        .then(response => caches.open(CACHE_NAME)
          .then(cache => {
            cache.put(event.request, response.clone());
            return response;
          }))
        .catch(() => caches.match(event.request.url))
    );
  }

  if (URLS_TO_PRECACHE.find((url) => event.request.url === url)) {
    return event.respondWith(
      caches.match(event.request)
        .catch(() => myFetch(event))
    )
  }

  event.respondWith(myFetch(event));
});

function broadcastMessage(command, data) {
  const payload = {command: command};
  if (data) {
    Object.assign(payload, data);
  }
  self.clients.matchAll().then(clients =>
    clients.forEach(client => client.postMessage(payload))
  );
}

let lastReportedOnlineStatus = true;
function myFetch(event) {
  return fetch(event.request)
    .then((response) => {
      if (!lastReportedOnlineStatus) {
        lastReportedOnlineStatus = true;
        broadcastMessage("networkStatus", {online: true});
      }
      return response;
    })
    .catch((error) => {
      lastReportedOnlineStatus = false;
      broadcastMessage("networkStatus", {online: false});
      throw error;
    })
    .then(response => {
      if (!event.request.url.match(/assets/)) {
        return response;
      }
      if (response.status >= 400 && response.status < 500) {
        return caches.open(CACHE_NAME)
          .then(cache => cache.delete("/"))
          .then(() => broadcastMessage("reload"))
          .then(() => response);
      }
      return response;
    })
}


self.addEventListener('fetch', (event) => {
  const requestIsHtml = event.request.method === 'GET' &&
    event.request.headers.get('accept').includes('text/html');
  if (requestIsHtml) {
    return event.respondWith(
      fetch(event.request)
        .catch(() => caches.match("/offline.html"))
    );
  }
});